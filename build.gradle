plugins {
    id("fabric-loom") version "1.0-SNAPSHOT"
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("com.diffplug.spotless") version "6.11.0"
}

group = "me.ramidzkh"
version = System.getenv("VTS_VERSION") ?: "0.0.0"

dependencies {
    minecraft("net.minecraft:minecraft:${minecraft_version}")
    mappings(loom.officialMojangMappings())
    modImplementation("net.fabricmc:fabric-loader:${loader_version}")

    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_version}")
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

loom {
    runs {
        create("data") {
            client()

            configName = "Data Generation"
            runDir = "build/data"

            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}")
            vmArg("-Dfabric-api.datagen.strict-validation")
            vmArg("-Dfabric-api.datagen.modid=villager-trading-station")
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

processResources {
    inputs.property("version", project.version)
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from("LICENSE")
    exclude(".cache")

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

/////////////
// Spotless
spotless {
    java {
        target("src/main/java/**/*.java")

        endWithNewline()
        indentWithSpaces()
        removeUnusedImports()
        toggleOffOn()
        eclipse().configFile("codeformat/codeformat.xml")
    }

    format("json") {
        target("src/main/resources/**/*.json")
        prettier().config(parser: "json")
    }
}

////////////////
// CurseForge
System.getenv("CURSEFORGE")?.with { String key ->
    curseforge {
        apiKey = key

        project {
            id = "694475"
            changelogType = "markdown"
            changelog = "View changelog at [the release page](https://github.com/ramidzkh/villager-trading-station/releases/tag/${version})"

            if (version.contains("alpha")) {
                releaseType = "alpha"
            } else if (version.contains("beta")) {
                releaseType = "beta"
            } else {
                releaseType = "release"
            }

            addGameVersion("${minecraft_version}")
            addGameVersion("Fabric")

            mainArtifact(remapJar) {
                displayName = "${project.version}"

                relations {
                    requiredDependency("fabric-api")
                }
            }
        }
    }
}
